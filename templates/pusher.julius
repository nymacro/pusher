var isPushEnabled = false;
var useNotifications = false;

var subBtn = document.querySelector('.subscribe');

var nameForm = document.querySelector('#form');
var nameInput = document.querySelector('#name-input');
nameForm.onsubmit = function(e) {
    e.preventDefault();
};
nameInput.value = 'Bob';

Notification.requestPermission();

window.addEventListener('load', function() {
    subBtn.addEventListener('click', function() {
        if (isPushEnabled) {
            unsubscribe();
        } else {
            subscribe();
        }
    });

    // Check that service workers are supported, if so, progressively
    // enhance and add push messaging support, otherwise continue without it.
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('sw.js').then(function(reg) {
            if (reg.installing) {
                console.log('Service worker installing');
            } else if (reg.waiting) {
                console.log('Service worker installed');
            } else if (reg.active) {
                console.log('Service worker active');
            }

            initialiseState(reg);
        });
    } else {
        console.log('Service workers aren\'t supported in this browser.');
    }
});


// Once the service worker is registered set the initial state
function initialiseState(reg) {
    // Are Notifications supported in the service worker?
    if (!(reg.showNotification)) {
        console.log('Notifications aren\'t supported on service workers.');
        useNotifications = false;
    } else {
        useNotifications = true;
    }

    // Check the current Notification permission.
    // If its denied, it's a permanent block until the
    // user changes the permission
    if (Notification.permission === 'denied') {
        console.log('The user has blocked notifications.');
        return;
    }

    // Check if push messaging is supported
    if (!('PushManager' in window)) {
        console.log('Push messaging isn\'t supported.');
        return;
    }

    // We need the service worker registration to check for a subscription
    navigator.serviceWorker.ready.then(function(reg) {
        // Do we already have a push message subscription?
        reg.pushManager.getSubscription()
            .then(function(subscription) {
                // Enable any UI which subscribes / unsubscribes from
                // push messages.

                subBtn.disabled = false;

                if (!subscription) {
                    console.log('Not yet subscribed to Push');
                    // We aren't subscribed to push, so set UI
                    // to allow the user to enable push
                    return;
                }

                // Set your UI to show they have subscribed for
                // push messages
                subBtn.textContent = 'Unsubscribe from Push Messaging';
                isPushEnabled = true;

                // initialize status, which includes setting UI elements for subscribed status
                // and updating Subscribers list via push
                console.log(subscription.toJSON());
                var endpoint = subscription.endpoint;
                var key = subscription.getKey('p256dh');
                console.log(key);
                updateStatus(endpoint,key,'init');
            })
            .catch(function(err) {
                console.log('Error during getSubscription()', err);
            });

        // set up a message channel to communicate with the SW
        var channel = new MessageChannel();
        channel.port1.onmessage = function(e) {
            console.log(e);
            handleChannelMessage(e.data);
        };

        var mySW = reg.active;
        mySW.postMessage('hello', [channel.port2]);
    });
}



function subscribe() {
    subBtn.disabled = true;
    nameInput.disabled = true;

    navigator.serviceWorker.ready.then(function(reg) {
        reg.pushManager.subscribe({userVisibleOnly: true})
            .then(function(subscription) {
                // The subscription was successful
                isPushEnabled = true;
                subBtn.textContent = 'Unsubscribe from Push Messaging';
                subBtn.disabled = false;

                // Update status to subscribe current user on server, and to let
                // other users know this user has subscribed
                var endpoint = subscription.endpoint;
                var key = subscription.getKey('p256dh');
                updateStatus(endpoint,key,'subscribe');
            })
            .catch(function(e) {
                if (Notification.permission === 'denied') {
                    // The user denied the notification permission which
                    // means we failed to subscribe and the user will need
                    // to manually change the notification permission to
                    // subscribe to push messages
                    console.log('Permission for Notifications was denied');

                } else {
                    // A problem occurred with the subscription, this can
                    // often be down to an issue or lack of the gcm_sender_id
                    // and / or gcm_user_visible_only
                    console.log('Unable to subscribe to push.', e);
                    subBtn.disabled = false;
                    nameInput.disabled = false;
                    subBtn.textContent = 'Subscribe to Push Messaging';
                }
            });
    });
    //   }
    // });
}

function unsubscribe() {
    subBtn.disabled = true;

    navigator.serviceWorker.ready.then(function(reg) {
        // To unsubscribe from push messaging, you need get the
        // subcription object, which you can call unsubscribe() on.
        reg.pushManager.getSubscription().then(
            function(subscription) {

                // Update status to unsubscribe current user from server (remove details)
                // and let other subscribers know they have unsubscribed
                var endpoint = subscription.endpoint;
                var key = subscription.getKey('p256dh');
                updateStatus(endpoint,key,'unsubscribe');

                // Check we have a subscription to unsubscribe
                if (!subscription) {
                    // No subscription object, so set the state
                    // to allow the user to subscribe to push
                    isPushEnabled = false;
                    subBtn.disabled = false;
                    subBtn.textContent = 'Subscribe to Push Messaging';
                    return;
                }

                isPushEnabled = false;

                setTimeout(function() {
                    // We have a subcription, so call unsubscribe on it
                    subscription.unsubscribe().then(function(successful) {
                        subBtn.disabled = false;
                        nameInput.disabled = false;
                        subBtn.textContent = 'Subscribe to Push Messaging';
                        isPushEnabled = false;
                    }).catch(function(e) {
                        console.log('Unsubscription error: ', e);
                        subBtn.disabled = false;
                        nameInput.disabled = false;
                    });
                }, 3000);
            }).catch(function(e) {
                console.log('Error thrown while unsubscribing from ' +
                            'push messaging.', e);
            });
    });
}

function updateStatus(endpoint,key,statusType) {
    var subscribeObj = {
        statusType: statusType,
        name: nameInput.value,
        endpoint: endpoint,
        key: btoa(String.fromCharCode.apply(null, new Uint8Array(key)))
    };

    var request = new XMLHttpRequest();
    request.open('POST', 'http://localhost:8080/subscribe');
    request.setRequestHeader('Content-Type', 'application/json');

    // If we are subscribing to push
    if (statusType === 'subscribe') {
        console.log(endpoint);
        console.log(key);

        console.log(subscribeObj);
        request.send(JSON.stringify(subscribeObj));
    } else if (statusType === 'unsubscribe') {
        console.log(subscribeObj);
        request.send(JSON.stringify(subscribeObj));
    } else if (statusType === 'init') {
        console.log(subscribeObj);
        request.send(JSON.stringify(subscribeObj));
    }
}

function handleChannelMessage(data) {
    if (data.action === 'subscribe' || data.action === 'init') {
        var listItem = document.createElement('li');
        listItem.textContent = data.name;
    } else if (data.action === 'unsubscribe') {
        nameInput.disabled = false;
    }
}
